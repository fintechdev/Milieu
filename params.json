{
  "name": "Milieu",
  "tagline": "Milieu is a config loader in the spirit of rc It shares the same features as RC, but goes a few steps further.",
  "body": "\r\n# Milieu\r\n\r\nOne could say it is one's milieu that shapes their future\r\n![](http://i.imgur.com/FgRHMFQ.jpg)\r\n\r\n[![npm](https://img.shields.io/npm/v/milieu.svg?maxAge=2592000?style=flat-square)](https://www.npmjs.com/package/milieu)\r\n[![CircleCI](https://img.shields.io/circleci/project/fintechdev/Milieu.svg?maxAge=2592000?style=flat-square)](https://circleci.com/gh/fintechdev/Milieu)\r\n[![Coveralls](https://img.shields.io/coveralls/fintechdev/Milieu.svg?maxAge=2592000?style=flat-square)](https://coveralls.io/github/fintechdev/Milieu?branch=master)\r\n[![bitHound](https://img.shields.io/bithound/code/github/fintechdev/Milieu.svg?maxAge=2592000?style=flat-square)](https://www.bithound.io/github/fintechdev/Milieu)\r\n[![bitHound Dependencies](https://img.shields.io/bithound/dependencies/github/fintechdev/Milieu.svg?maxAge=2592000?style=flat-square)](https://www.bithound.io/github/fintechdev/Milieu/master/dependencies/npm)\r\n[![bitHound Dependencies](https://img.shields.io/bithound/devDependencies/github/fintechdev/Milieu.svg?maxAge=2592000?style=flat-square)](https://www.bithound.io/github/fintechdev/Milieu/master/dependencies/npm)\r\n\r\n## Install with NPM\r\n\r\n```shell\r\nnpm install milieu\r\n```\r\n\r\n## Introduction\r\n\r\nMilieu is a config loader in the spirit of\r\n[rc](https://github.com/dominictarr/rc) It shares the same features as RC, but\r\ngoes a few steps further.\r\n\r\nMilieu loads config values from argv flags, environment variables, and config\r\nfiles. The values are compiled into a single config object which you can use\r\nin your application. You can trace the sources of these values using Milieu's\r\nexplain feature.\r\n\r\nMilieu can parse JSON config files out of the box. You can also use INI and YAML\r\nfiles by installing the optional dependencies\r\n[ini](https://github.com/isaacs/ini) and/or\r\n[js-yaml](https://github.com/nodeca/js-yaml) modules.\r\n\r\n> The word milieu is defined as the physical or social setting in which people\r\n> live or in which something happens or develops.\r\n\r\n```javascript\r\nvar milieu = require('milieu');\r\n\r\nvar config = milieu('application-name', {\r\n  server: {\r\n    port: 8001\r\n  },\r\n  mongo: {\r\n    url: 'mongodb://localhost'\r\n  }\r\n});\r\n```\r\n\r\n### Milieu Compile Order\r\nMilieu looks in the following places and compiles a config by merging upward\r\nthrough the following sources. Items highest in the list get the highest\r\npriority, and override config values in the sources below.\r\n\r\n0. argv flags - Ex. `--test.myKey=val` becomes `config.test.myKey === 'val'`\r\n   in the config. Anything after -- is ignored.\r\n0. environment variables - Ex. `APPLICATION_NAME__TEST__MY_KEY=\"val\"` becomes\r\n   `config.test.myKey === 'val'`\r\n0. config files (replace {appname} with the name of your application)\r\n  (Accepts JSON, INI, or YAML) (File extensions are optional)\r\n    0. ~/.{appname}rc\r\n    0. ~/.{appname}/config\r\n    0. ~/.config/{appname}\r\n    0. ~/.config/{appname}/config\r\n    0. /etc/{appname}rc\r\n    0. /etc/{appname}/config\r\n    0. /usr/local/etc/{appname}rc\r\n    0. /usr/local/etc/{appname}/config\r\n    0. ./.{appname}rc\r\n    0. ../.{appname}rc\r\n    0. ../../.{appname}rc\r\n    0. ../../../.{appname}rc\r\n    0. ...\r\n\r\n\r\n## Milieu Templating and Type Casting\r\nMilieu provides both file and environment variable templating. It also provides\r\nsyntax for type casting. Below are a few examples.\r\n\r\nTo load values from a file use the `$(path/to/file)` syntax. If the path is not\r\nabsolute, it will be relative to the current working directory. You can use\r\nthese tokens as many times as you need within a single value.\r\n\r\n```javascript\r\nvar config = milieu('application-name', {\r\n  specialFile: 'part1: $(path/to/specialFile-part-1.txt)\\npart2: $(path/to/specialFile-part-2.txt)'\r\n});\r\n```\r\n\r\nTo load values from environment variables use the `${VAR_NAME}` syntax. You can\r\nuse these tokens as many times as you need within a single value.\r\n\r\n```javascript\r\nvar config = milieu('application-name', {\r\n  secretTokens: '1:${SECRET_TOKEN_1}2:${SECRET_TOKEN_2}3:${SECRET_TOKEN_3}'\r\n});\r\n```\r\n\r\nType casting can be achieved with filters. To cast a value simply add the type\r\nname and a colon to the beginning of your string. Types supported are `number`\r\nand `boolean`. JSON can also be parsed using `json` as the type.\r\n\r\n```javascript\r\nvar config = milieu('application-name', {\r\n  secretNumber: 'number:${SECRET_NUMBER}'\r\n  secretBool  : 'boolean:${SECRET_BOOL}'\r\n  secretObj   : 'json:${SECRET_JSON}'\r\n});\r\n```\r\n\r\n\r\n## Milieu Explain\r\nMilieu has a feature called explain. There are explain two methods;\r\n`config.explain()` and `config.printExplainTable()`. `config.explain()` returns\r\nan object indicating the origin of each config value.\r\n`config.printExplainTable()` prints a table to stdout which can be used\r\nto inspect your config from the cli. This is great for understanding how your\r\nconfiguration was resolved, and can be helpful for debugging production systems.\r\n\r\n![example](http://i.imgur.com/BzzxMAy.png)\r\n\r\nLets suppose we have a config for our server at `/etc/application-name/config`.\r\nIn it we set the value of `server.port` and nothing else. We also execute our\r\napplication below passing the flag `--debug true`. Our explanation object will\r\ncontain the origin of each config key as shown below.\r\n\r\n```javascript\r\nvar milieu = require('milieu');\r\n\r\nvar explanation = milieu('application-name', {\r\n  server: {\r\n    port: 8001\r\n  },\r\n  mongo: {\r\n    url: 'mongodb://localhost'\r\n  },\r\n  debug: false\r\n}).explain();\r\n\r\nexplanation === {\r\n  server: {\r\n    port: '/etc/application-name/config'\r\n  },\r\n  mongo: {\r\n    url: 'default'\r\n  },\r\n  debug: 'flag'\r\n}\r\n```\r\n\r\nIf you wish to generate a table on the command line instead of working with an\r\nexplanation object, call `config.printExplainTable`.\r\n\r\n```javascript\r\nvar milieu = require('milieu');\r\n\r\n// prints table to stdout\r\nmilieu('application-name', {\r\n  server: {\r\n    port: 8001\r\n  },\r\n  mongo: {\r\n    url: 'mongodb://localhost'\r\n  },\r\n  debug: false\r\n}).printExplainTable();\r\n```\r\n\r\n\r\n# API Docs\r\n\r\n## milieuFactory\r\n\r\n```\r\nmilieuFactory(applicationName String, defaultConfig Object, opts Object) -> config Object\r\n```\r\n\r\nInternally creates an instance of Milieu instance and returns it.\r\nAccepts a `applicationName` and a `defaultConfig`. It also\r\noptionally accepts an `opts` object to configure Milieu. See\r\n[Milieu's load order](#milieu-load-order) to understand how the config object\r\nis resolved. These does refer to milieuFactory as `milieuFactory` but It is\r\nrecommended that the name `milieu` be used instead as most users will not\r\ninteract with `Milieu` constructor or it's instance directly.\r\n\r\n### Milieu Options\r\n- `opts.argv` Pass a custom argv array. Defaults to `process.argv`.\r\n- `opts.env`  Pass a custom env object. Defaults to `process.env`.\r\n- `opts.platform`  Pass a custom platform string. Defaults to\r\n  `process.platform`.\r\n- `opts.unsetEnvValues` If true, deletes env values that belong to the config.\r\n  Defaults to `false`.\r\n- `opts.parseValues` If true, parses strings `'null'`, `'true'`, `'false'`,\r\n  and `'NaN'` into `null`, `true`, `false`, and `NaN`. Defaults to `true`.\r\n\r\n\r\n```javascript\r\nvar milieuFactory = require('milieu');\r\n\r\nvar config = milieuFactory('application-name', {\r\n  defaultKey: 'value'\r\n});\r\n```\r\n\r\n\r\n## Milieu\r\n\r\n```\r\nnew Milieu(applicationName String, defaultConfig Object, opts Object) -> Milieu\r\n```\r\n\r\nThe Milieu constructor. Accepts the same arguments as\r\n[milieuFactory](#milieuFactory).\r\n\r\n```javascript\r\nvar Milieu = require('milieu').Milieu;\r\n\r\nvar milieu = new Milieu('application-name', {\r\n  defaultKey: 'value'\r\n});\r\n```\r\n\r\n## Milieu#toObject\r\n\r\n```\r\nmilieu.toObject() -> config Object\r\n```\r\n\r\nResolves the config object. Use this method to retrieve your config if using a\r\nMilieu instance directly.\r\n\r\n```javascript\r\nvar Milieu = require('milieu').Milieu;\r\n\r\nvar milieu = new Milieu('application-name', {\r\n  defaultKey: 'value'\r\n});\r\n\r\nvar config = milieu.toObject();\r\n```\r\n\r\n## Milieu#explain\r\n\r\n```\r\nmilieu.explain() -> explanation Object\r\n```\r\n\r\nReturns an explanation object.\r\n\r\n```javascript\r\nvar Milieu = require('milieu').Milieu;\r\n\r\nvar milieu = new Milieu('application-name', {\r\n  defaultKey: 'value'\r\n});\r\n\r\nvar explanation = milieu.explain();\r\n```\r\n\r\n## Milieu#printExplainTable\r\n\r\n```\r\nmilieu.explain() -> explanation Object\r\n```\r\n\r\nPrints an explanation table to stdout.\r\n\r\n```javascript\r\nvar Milieu = require('milieu').Milieu;\r\n\r\nvar milieu = new Milieu('application-name', {\r\n  defaultKey: 'value'\r\n});\r\n\r\n// prints to stdout\r\nmilieu.printExplainTable();\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}